#!/usr/bin/env python3
"""
Web Server cho h·ªá th·ªëng Online Judge Network Programming
S·ª≠ d·ª•ng Flask ƒë·ªÉ cung c·∫•p giao di·ªán web cho sinh vi√™n v√† gi·∫£ng vi√™n
"""

from flask import Flask, render_template, request, session, redirect, url_for, flash
import os
import uuid
import hmac
import hashlib
import json
import time
from datetime import datetime

# --- C·∫•u h√¨nh ·ª©ng d·ª•ng ---
app = Flask(__name__)
app.secret_key = 'network-programming-oj-secret-key-2025'  # Key ƒë·ªÉ m√£ h√≥a session

# --- C·∫•u h√¨nh ---
TOKEN_FILE = "/tmp/judge_tokens.json"  # File ƒë·ªÉ giao ti·∫øp v·ªõi Judge Server

# --- Gi·∫£ l·∫≠p c∆° s·ªü d·ªØ li·ªáu ---
# Trong th·ª±c t·∫ø, ƒë√¢y s·∫Ω l√† c√°c b·∫£ng trong CSDL
USERS = {
    "student1": {"password": "pass1", "full_name": "Nguy·ªÖn VƒÉn A"},
    "student2": {"password": "pass2", "full_name": "Tr·∫ßn Th·ªã B"},
    "admin": {"password": "admin123", "full_name": "Gi·∫£ng vi√™n"}
}

PROBLEMS = [
    {
        "id": 1,
        "title": "B√†i 1: T·∫£i v√† Ph√¢n t√≠ch File Log",
        "description": "Vi·∫øt m·ªôt ch∆∞∆°ng tr√¨nh client k·∫øt n·ªëi ƒë·∫øn server, t·∫£i file log ƒë∆∞·ª£c g·ª≠i v·ªÅ, t√¨m ra 'SECRET_CODE' b√™n trong file v√† g·ª≠i l·∫°i k·∫øt qu·∫£ cho server ƒë·ªÉ nh·∫≠n m√£ n·ªôp b√†i.",
        "port": 10005,
        "base_flag": "flask-is-awesome-2025",  # Ph·∫£i kh·ªõp v·ªõi Judge Server
        "difficulty": "C∆° b·∫£n",
        "points": 100
    }
]

# CSDL gi·∫£ l·∫≠p cho token v√† b√†i ƒë√£ gi·∫£i
# C·∫•u tr√∫c: { "username": { "problem_id": {"token": "xxx", "created_at": timestamp} } }
USER_SESSIONS = {} 
# C·∫•u tr√∫c: { "username": [problem_id_1, problem_id_2] }
SOLVED_PROBLEMS = {}

# --- H√†m tr·ª£ gi√∫p ---
def generate_submission_code(session_token, base_flag):
    """T√°i t·∫°o m√£ n·ªôp b√†i ƒë·ªÉ x√°c th·ª±c."""
    return hmac.new(base_flag.encode(), session_token.encode(), hashlib.sha256).hexdigest()

def save_token_to_file(token, username, problem_id):
    """L∆∞u token v√†o file ƒë·ªÉ Judge Server c√≥ th·ªÉ ƒë·ªçc"""
    try:
        # ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i
        tokens = {}
        if os.path.exists(TOKEN_FILE):
            with open(TOKEN_FILE, 'r') as f:
                tokens = json.load(f)
        
        # Th√™m token m·ªõi
        tokens[token] = {
            "username": username,
            "problem_id": problem_id,
            "created_at": time.time()
        }
        
        # Ghi l·∫°i file
        with open(TOKEN_FILE, 'w') as f:
            json.dump(tokens, f, indent=2)
            
        print(f"[WEB] ƒê√£ l∆∞u token '{token}' cho user '{username}' v√†o file.")
        return True
    except Exception as e:
        print(f"[WEB] L·ªói khi l∆∞u token: {e}")
        return False

def remove_token_from_file(token):
    """X√≥a token kh·ªèi file sau khi ƒë√£ s·ª≠ d·ª•ng"""
    try:
        if os.path.exists(TOKEN_FILE):
            with open(TOKEN_FILE, 'r') as f:
                tokens = json.load(f)
            
            if token in tokens:
                del tokens[token]
                
                with open(TOKEN_FILE, 'w') as f:
                    json.dump(tokens, f, indent=2)
                    
                print(f"[WEB] ƒê√£ x√≥a token '{token}' kh·ªèi file.")
        return True
    except Exception as e:
        print(f"[WEB] L·ªói khi x√≥a token: {e}")
        return False

# --- C√°c Route c·ªßa Web ---
@app.route('/login', methods=['GET', 'POST'])
def login():
    """Trang ƒëƒÉng nh·∫≠p"""
    if request.method == 'POST':
        username = request.form['username']
        password = request.form.get('password', '')
        
        # Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
        if username in USERS:
            # ƒê·ªÉ ƒë∆°n gi·∫£n demo, ch·ªâ c·∫ßn username ƒë√∫ng
            session['username'] = username
            session['full_name'] = USERS[username]['full_name']
            
            # Kh·ªüi t·∫°o session cho user n·∫øu ch∆∞a c√≥
            if username not in USER_SESSIONS:
                USER_SESSIONS[username] = {}
            if username not in SOLVED_PROBLEMS:
                SOLVED_PROBLEMS[username] = []
                
            flash(f"Ch√†o m·ª´ng {USERS[username]['full_name']}!", "success")
            return redirect(url_for('index'))
        else:
            flash("T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i.", "error")
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """ƒêƒÉng xu·∫•t"""
    username = session.get('username', 'Unknown')
    session.clear()
    flash(f"ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng. H·∫πn g·∫∑p l·∫°i!", "success")
    return redirect(url_for('login'))

@app.route('/')
def index():
    """Trang ch·ªß - danh s√°ch b√†i t·∫≠p"""
    if 'username' not in session:
        return redirect(url_for('login'))
    
    username = session['username']
    solved_list = SOLVED_PROBLEMS.get(username, [])
    
    # Th·ªëng k√™
    total_problems = len(PROBLEMS)
    solved_count = len(solved_list)
    total_points = sum(p['points'] for p in PROBLEMS if p['id'] in solved_list)
    
    return render_template('index.html', 
                         problems=PROBLEMS, 
                         solved_problems=solved_list,
                         stats={
                             'total_problems': total_problems,
                             'solved_count': solved_count,
                             'total_points': total_points
                         })

@app.route('/problem/<int:problem_id>', methods=['GET', 'POST'])
def problem_detail(problem_id):
    """Trang chi ti·∫øt b√†i t·∫≠p"""
    if 'username' not in session:
        return redirect(url_for('login'))

    username = session['username']
    problem = next((p for p in PROBLEMS if p['id'] == problem_id), None)
    
    if not problem:
        flash("B√†i t·∫≠p kh√¥ng t·ªìn t·∫°i.", "error")
        return redirect(url_for('index'))

    # T·∫°o ho·∫∑c l·∫•y Session Token cho user v√† b√†i t·∫≠p n√†y
    if problem_id not in USER_SESSIONS[username]:
        # T·∫°o token m·ªõi
        token = str(uuid.uuid4())
        USER_SESSIONS[username][problem_id] = {
            "token": token,
            "created_at": time.time()
        }
        
        # L∆∞u token v√†o file ƒë·ªÉ Judge Server c√≥ th·ªÉ ƒë·ªçc
        save_token_to_file(token, username, problem_id)
        
        print(f"[WEB] ƒê√£ c·∫•p token m·ªõi '{token}' cho user '{username}', problem {problem_id}")
    
    session_token = USER_SESSIONS[username][problem_id]["token"]

    # X·ª≠ l√Ω n·ªôp b√†i
    if request.method == 'POST':
        submitted_code = request.form['submission_code'].strip()
        
        if not submitted_code:
            flash("Vui l√≤ng nh·∫≠p m√£ n·ªôp b√†i.", "error")
            return render_template('problem.html', problem=problem, session_token=session_token)
        
        # T·∫°o l·∫°i m√£ mong ƒë·ª£i ƒë·ªÉ so s√°nh
        expected_code = generate_submission_code(session_token, problem['base_flag'])

        if submitted_code == expected_code:
            # N·ªôp b√†i th√†nh c√¥ng
            flash("üéâ Ch√≠nh x√°c! B·∫°n ƒë√£ gi·∫£i th√†nh c√¥ng b√†i to√°n.", "success")
            
            # Ghi nh·∫≠n b√†i ƒë√£ gi·∫£i
            if problem_id not in SOLVED_PROBLEMS[username]:
                SOLVED_PROBLEMS[username].append(problem_id)
                print(f"[WEB] User '{username}' ƒë√£ gi·∫£i th√†nh c√¥ng problem {problem_id}")
            
            # X√≥a token sau khi ƒë√£ s·ª≠ d·ª•ng ƒë·ªÉ kh√¥ng th·ªÉ n·ªôp l·∫°i
            if problem_id in USER_SESSIONS[username]:
                old_token = USER_SESSIONS[username][problem_id]["token"]
                del USER_SESSIONS[username][problem_id]
                remove_token_from_file(old_token)
            
            return redirect(url_for('index'))
        else:
            flash("‚ùå M√£ n·ªôp b√†i kh√¥ng ch√≠nh x√°c. H√£y ki·ªÉm tra l·∫°i ch∆∞∆°ng tr√¨nh c·ªßa b·∫°n.", "error")
            print(f"[WEB] User '{username}' n·ªôp sai m√£. Expected: {expected_code}, Got: {submitted_code}")

    return render_template('problem.html', problem=problem, session_token=session_token)

@app.route('/leaderboard')
def leaderboard():
    """B·∫£ng x·∫øp h·∫°ng"""
    if 'username' not in session:
        return redirect(url_for('login'))
    
    # T√≠nh ƒëi·ªÉm cho t·ª´ng user
    rankings = []
    for username in USERS:
        if username in SOLVED_PROBLEMS:
            solved_list = SOLVED_PROBLEMS[username]
            total_points = sum(p['points'] for p in PROBLEMS if p['id'] in solved_list)
            solved_count = len(solved_list)
        else:
            total_points = 0
            solved_count = 0
            
        rankings.append({
            'username': username,
            'full_name': USERS[username]['full_name'],
            'solved_count': solved_count,
            'total_points': total_points
        })
    
    # S·∫Øp x·∫øp theo ƒëi·ªÉm gi·∫£m d·∫ßn
    rankings.sort(key=lambda x: (x['total_points'], x['solved_count']), reverse=True)
    
    return render_template('leaderboard.html', rankings=rankings)

@app.route('/status')
def status():
    """Trang tr·∫°ng th√°i h·ªá th·ªëng"""
    if 'username' not in session:
        return redirect(url_for('login'))
    
    # Ki·ªÉm tra Judge Server c√≥ ho·∫°t ƒë·ªông kh√¥ng
    judge_status = "Unknown"
    try:
        import socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(2)
        result = sock.connect_ex(('127.0.0.1', 10005))
        sock.close()
        judge_status = "Online" if result == 0 else "Offline"
    except:
        judge_status = "Offline"
    
    # Th·ªëng k√™ token
    active_tokens = 0
    try:
        if os.path.exists(TOKEN_FILE):
            with open(TOKEN_FILE, 'r') as f:
                tokens = json.load(f)
                active_tokens = len(tokens)
    except:
        pass
    
    system_info = {
        'judge_server_status': judge_status,
        'active_tokens': active_tokens,
        'total_users': len(USERS),
        'total_problems': len(PROBLEMS),
        'server_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    return render_template('status.html', system_info=system_info)

# --- Error Handlers ---
@app.errorhandler(404)
def not_found(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

if __name__ == '__main__':
    print("=" * 60)
    print("üåê NETWORK PROGRAMMING ONLINE JUDGE - WEB SERVER")
    print("=" * 60)
    print(f"üîó URL: http://127.0.0.1:5000")
    print(f"üë• Demo accounts: student1, student2, admin")
    print(f"üìÅ Token file: {TOKEN_FILE}")
    print("=" * 60)
    
    # T·∫°o th∆∞ m·ª•c tmp n·∫øu ch∆∞a c√≥
    os.makedirs(os.path.dirname(TOKEN_FILE), exist_ok=True)
    
    # Kh·ªüi ƒë·ªông Flask app
    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)

