#!/usr/bin/env python3
"""
Judge Server cho h·ªá th·ªëng Online Judge Network Programming
X·ª≠ l√Ω c√°c k·∫øt n·ªëi t·ª´ client c·ªßa sinh vi√™n v√† t∆∞∆°ng t√°c theo k·ªãch b·∫£n b√†i to√°n
"""

import socket
import threading
import os
import hmac
import hashlib
import time
import json

# C·∫•u h√¨nh server
HOST = '0.0.0.0'  # L·∫Øng nghe tr√™n t·∫•t c·∫£ interface
PROBLEM_PORT = 10005
BASE_FLAG = "flask-is-awesome-2025"  # Flag g·ªëc, ph·∫£i kh·ªõp v·ªõi web server

# Gi·∫£ l·∫≠p CSDL Session Token (trong th·ª±c t·∫ø s·∫Ω truy v·∫•n DB)
# Web server s·∫Ω th√™m token v√†o ƒë√¢y, Judge server ch·ªâ ƒë·ªçc
# C·∫•u tr√∫c: { "token": {"username": "student1", "problem_id": 1, "created_at": timestamp} }
VALID_TOKENS = {}

# File log ƒë·ªÉ giao ti·∫øp v·ªõi Web Server (ƒë∆°n gi·∫£n h√≥a cho demo)
TOKEN_FILE = "/tmp/judge_tokens.json"

def load_tokens():
    """ƒê·ªçc danh s√°ch token h·ª£p l·ªá t·ª´ file"""
    global VALID_TOKENS
    try:
        if os.path.exists(TOKEN_FILE):
            with open(TOKEN_FILE, 'r') as f:
                VALID_TOKENS = json.load(f)
    except Exception as e:
        print(f"[JUDGE] L·ªói khi ƒë·ªçc token file: {e}")
        VALID_TOKENS = {}

def generate_submission_code(session_token, base_flag):
    """T·∫°o m√£ n·ªôp b√†i b·∫±ng HMAC-SHA256."""
    return hmac.new(base_flag.encode(), session_token.encode(), hashlib.sha256).hexdigest()

def handle_client(conn, addr):
    """X·ª≠ l√Ω m·ªôt client k·∫øt n·ªëi"""
    print(f"[JUDGE] K·∫øt n·ªëi m·ªõi t·ª´ {addr}")
    
    try:
        # 1. Y√™u c·∫ßu v√† x√°c th·ª±c Session Token
        conn.sendall(b"SEND_TOKEN\n")
        
        # ƒê·ª£i client g·ª≠i token (timeout 30 gi√¢y)
        conn.settimeout(30.0)
        token_data = conn.recv(1024).decode().strip()
        
        if not token_data:
            print(f"[JUDGE] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c token t·ª´ {addr}")
            conn.sendall(b"NO_TOKEN_RECEIVED\n")
            return

        # Reload tokens t·ª´ file ƒë·ªÉ c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t
        load_tokens()
        
        if token_data not in VALID_TOKENS:
            print(f"[JUDGE] Token kh√¥ng h·ª£p l·ªá: {token_data}. ƒê√≥ng k·∫øt n·ªëi.")
            conn.sendall(b"INVALID_TOKEN\n")
            return

        token_info = VALID_TOKENS[token_data]
        username = token_info.get('username', 'unknown')
        print(f"[JUDGE] Token h·ª£p l·ªá cho user '{username}'.")

        # 2. G·ª≠i file log
        filepath = "server_log.txt"
        if not os.path.exists(filepath):
            print(f"[JUDGE] File log kh√¥ng t·ªìn t·∫°i: {filepath}")
            conn.sendall(b"FILE_NOT_FOUND\n")
            return
            
        filesize = os.path.getsize(filepath)
        
        # G·ª≠i header th√¥ng tin file
        header = f"SENDING_FILE:{os.path.basename(filepath)}:{filesize}\n"
        conn.sendall(header.encode())
        
        # G·ª≠i n·ªôi dung file
        with open(filepath, 'rb') as f:
            data = f.read()
            conn.sendall(data)
        
        print(f"[JUDGE] ƒê√£ g·ª≠i file '{filepath}' ({filesize} bytes) cho {username}.")

        # 3. Ch·ªù k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ client
        print(f"[JUDGE] ƒêang ch·ªù k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ {username}...")
        client_response = conn.recv(1024).decode().strip()
        
        if not client_response.startswith("RESULT:"):
            print(f"[JUDGE] Ph·∫£n h·ªìi kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng t·ª´ {username}: {client_response}")
            conn.sendall(b"INVALID_FORMAT\n")
            return
            
        secret_code = client_response.split(':', 1)[1].strip()
        
        # L·∫•y secret code th·∫≠t t·ª´ file log ƒë·ªÉ so s√°nh
        real_secret = ""
        with open(filepath, 'r') as f:
            for line in f:
                if line.startswith("SECRET_CODE:"):
                    real_secret = line.split(':', 1)[1].strip()
                    print(real_secret)
                    break
        
        if secret_code == real_secret:
            print(f"[JUDGE] {username} g·ª≠i ƒë√∫ng secret code: {secret_code}")
            
            # 4. T·∫°o v√† g·ª≠i m√£ n·ªôp b√†i
            submission_code = generate_submission_code(token_data, BASE_FLAG)
            conn.sendall(submission_code.encode())
            print(f"[JUDGE] ƒê√£ g·ª≠i submission code cho {username}: {submission_code}")
            
        else:
            print(f"[JUDGE] {username} g·ª≠i sai secret code. Mong ƒë·ª£i: '{real_secret}', nh·∫≠n ƒë∆∞·ª£c: '{secret_code}'")
            conn.sendall(b"INCORRECT_SECRET_CODE\n")

    except socket.timeout:
        print(f"[JUDGE] Timeout khi ch·ªù d·ªØ li·ªáu t·ª´ {addr}")
        try:
            conn.sendall(b"TIMEOUT\n")
        except:
            pass
    except Exception as e:
        print(f"[JUDGE] L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω client {addr}: {e}")
        try:
            conn.sendall(b"SERVER_ERROR\n")
        except:
            pass
    finally:
        try:
            conn.close()
        except:
            pass
        print(f"[JUDGE] ƒê√≥ng k·∫øt n·ªëi v·ªõi {addr}")

def start_judge_server():
    """Kh·ªüi ƒë·ªông Judge Server"""
    # T·∫°o file token n·∫øu ch∆∞a c√≥
    if not os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, 'w') as f:
            json.dump({}, f)
    
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    try:
        server.bind((HOST, PROBLEM_PORT))
        server.listen(5)
        print(f"[*] Judge Server ƒëang l·∫Øng nghe tr√™n {HOST}:{PROBLEM_PORT}")
        print(f"[*] File log: {os.path.abspath('server_log.txt')}")
        print(f"[*] Token file: {TOKEN_FILE}")
        print(f"[*] S·∫µn s√†ng nh·∫≠n k·∫øt n·ªëi t·ª´ client...")
        
        while True:
            try:
                conn, addr = server.accept()
                # X·ª≠ l√Ω m·ªói client trong m·ªôt thread ri√™ng
                thread = threading.Thread(target=handle_client, args=(conn, addr))
                thread.daemon = True
                thread.start()
            except KeyboardInterrupt:
                print("\n[*] ƒêang t·∫Øt Judge Server...")
                break
            except Exception as e:
                print(f"[JUDGE] L·ªói khi accept connection: {e}")
                
    except Exception as e:
        print(f"[JUDGE] L·ªói khi kh·ªüi ƒë·ªông server: {e}")
    finally:
        server.close()
        print("[*] Judge Server ƒë√£ t·∫Øt.")

if __name__ == '__main__':
    print("=" * 60)
    print("üåê NETWORK PROGRAMMING ONLINE JUDGE - JUDGE SERVER")
    print("=" * 60)
    
    # Ki·ªÉm tra file log c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists("server_log.txt"):
        print("[!] C·∫£nh b√°o: File 'server_log.txt' kh√¥ng t·ªìn t·∫°i!")
        print("[!] H√£y ƒë·∫£m b·∫£o file n√†y c√≥ trong th∆∞ m·ª•c hi·ªán t·∫°i.")
        exit(1)
    
    try:
        start_judge_server()
    except KeyboardInterrupt:
        print("\n[*] Judge Server ƒë√£ ƒë∆∞·ª£c t·∫Øt b·ªüi ng∆∞·ªùi d√πng.")
    except Exception as e:
        print(f"[!] L·ªói nghi√™m tr·ªçng: {e}")

