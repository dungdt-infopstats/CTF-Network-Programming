

import socket
import hmac
import hashlib
import os
import time

JUDGE_SERVER_HOST = '127.0.0.1'
JUDGE_SERVER_PORT = 10005

def solve_problem(session_token):
    print(f"[CLIENT] B·∫Øt ƒë·∫ßu gi·∫£i b√†i v·ªõi Session Token: {session_token}")
    
    try:
        # 1. K·∫øt n·ªëi ƒë·∫øn Judge Server
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.connect((JUDGE_SERVER_HOST, JUDGE_SERVER_PORT))
            print(f"[CLIENT] ƒê√£ k·∫øt n·ªëi ƒë·∫øn Judge Server t·∫°i {JUDGE_SERVER_HOST}:{JUDGE_SERVER_PORT}")

            # 2. G·ª≠i Session Token
            sock.sendall(session_token.encode() + b'\n')
            print(f"[CLIENT] ƒê√£ g·ª≠i Session Token.")

            # 3. Nh·∫≠n File Log
            log_data = b''
            while True:
                chunk = sock.recv(4096)
                if not chunk:
                    break
                log_data += chunk
            
            log_content = log_data.decode().strip()
            print(f"[CLIENT] ƒê√£ nh·∫≠n file log c√≥ ƒë·ªô d√†i {len(log_content)} bytes.")
            print(log_content)  # In n·ªôi dung file log ƒë·ªÉ ki·ªÉm tra

            # 4. Ph√¢n t√≠ch File Log ƒë·ªÉ t√¨m SECRET_CODE
            secret_code = None
            for line in log_content.splitlines():
                if "SECRET_CODE:" in line:
                    secret_code = line.split("SECRET_CODE:")[1].strip()
                    break
            
            if not secret_code:
                print("[CLIENT] Kh√¥ng t√¨m th·∫•y SECRET_CODE trong file log.")
                return None
            
            print(f"[CLIENT] ƒê√£ t√¨m th·∫•y SECRET_CODE: {secret_code}")

            # 5. G·ª≠i SECRET_CODE tr·ªü l·∫°i Judge Server
            sock.sendall(secret_code.encode() + b'\n')
            print(f"[CLIENT] ƒê√£ g·ª≠i SECRET_CODE.")

            # 6. Nh·∫≠n Base Flag t·ª´ Judge Server
            base_flag = sock.recv(1024).decode().strip()
            if not base_flag:
                print("[CLIENT] Kh√¥ng nh·∫≠n ƒë∆∞·ª£c Base Flag t·ª´ Judge Server.")
                return None
            
            print(f"[CLIENT] ƒê√£ nh·∫≠n Base Flag: {base_flag}")

            # 7. T·∫°o Submission Code
            submission_code = hmac.new(base_flag.encode(), session_token.encode(), hashlib.sha256).hexdigest()
            print(f"[CLIENT] Submission Code ƒë∆∞·ª£c t·∫°o: {submission_code}")
            
            return submission_code

    except ConnectionRefusedError:
        print(f"[CLIENT ERROR] K·∫øt n·ªëi b·ªã t·ª´ ch·ªëi. ƒê·∫£m b·∫£o Judge Server ƒëang ch·∫°y tr√™n {JUDGE_SERVER_HOST}:{JUDGE_SERVER_PORT}")
    except Exception as e:
        print(f"[CLIENT ERROR] ƒê√£ x·∫£y ra l·ªói: {e}")
    
    return None

if __name__ == '__main__':
    print("=" * 60)
    print("üíª CLIENT DEMO - GI·∫¢I B√ÄI T·∫¨P NETWORK PROGRAMMING")
    print("=" * 60)
    print("H∆∞·ªõng d·∫´n:")
    print("1. ƒêƒÉng nh·∫≠p v√†o Web Server (URL ƒë√£ ƒë∆∞·ª£c cung c·∫•p).")
    print("2. Truy c·∫≠p trang chi ti·∫øt b√†i t·∫≠p 'T·∫£i v√† Ph√¢n t√≠ch File Log'.")
    print("3. L·∫•y 'Session Token' hi·ªÉn th·ªã tr√™n trang ƒë√≥.")
    print("4. D√°n 'Session Token' v√†o ƒë√¢y khi ƒë∆∞·ª£c y√™u c·∫ßu.")
    print("=" * 60)

    # L·∫•y Session Token t·ª´ ng∆∞·ªùi d√πng
    session_token_input = input("Vui l√≤ng nh·∫≠p Session Token c·ªßa b·∫°n: ").strip()

    if not session_token_input:
        print("[CLIENT] Session Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. Tho√°t.")
    else:
        final_submission_code = solve_problem(session_token_input)
        if final_submission_code:
            print("=" * 60)
            print("‚úÖ ƒê√£ t·∫°o th√†nh c√¥ng Submission Code!")
            print(f"M√£ n·ªôp b√†i c·ªßa b·∫°n l√†: {final_submission_code}")
            print("Vui l√≤ng d√°n m√£ n√†y v√†o √¥ n·ªôp b√†i tr√™n Web Server ƒë·ªÉ ho√†n th√†nh.")
            print("=" * 60)
        else:
            print("=" * 60)
            print("‚ùå Kh√¥ng th·ªÉ t·∫°o Submission Code. Vui l√≤ng ki·ªÉm tra l·∫°i log l·ªói.")
            print("ƒê·∫£m b·∫£o Judge Server ƒëang ch·∫°y v√† Session Token h·ª£p l·ªá.")
            print("=" * 60)

